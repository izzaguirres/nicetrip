import { supabase } from './supabase'

interface PackageDescription {
  titulo: string
  descripcion: string
}

class PackageDescriptionService {
  private cache = new Map<string, PackageDescription>()

  async getDescription(
    transporte: 'Bus' | 'A√©reo', 
    destino: string, 
    hotel: string
  ): Promise<PackageDescription> {
    // Criar chave √∫nica para cache
    const cacheKey = `${transporte}-${destino}-${hotel}`.toLowerCase()
    
    // Verificar cache
    if (this.cache.has(cacheKey)) {
      console.log('üíæ DESCRIPTIONS: Usando cache para', cacheKey)
      return this.cache.get(cacheKey)!
    }

    try {
      console.log('üîç DESCRIPTIONS: Buscando no Supabase para:', { transporte, destino, hotel })
      console.log('üìã DESCRIPTIONS: Query ‚Üí SELECT titulo, descripcion_detallada FROM package_descriptions')
      
      // Buscar descri√ß√£o mais espec√≠fica primeiro (hotel espec√≠fico)
      let { data, error } = await supabase
        .from('package_descriptions')
        .select('titulo, descripcion_detallada')
        .eq('transporte', transporte)
        .eq('destino', destino)
        .ilike('hotel', hotel) // Use ilike for case-insensitive matching
        .limit(1)
        .single()

      console.log('üìä DESCRIPTIONS: Resultado espec√≠fico:', { data, error })

      // Se n√£o encontrou descri√ß√£o espec√≠fica do hotel, buscar gen√©rica do destino+transporte
      if (error || !data) {
        console.log('üîÑ DESCRIPTIONS: Buscando descri√ß√£o gen√©rica para destino+transporte')
        
        const { data: genericData, error: genericError } = await supabase
          .from('package_descriptions')
          .select('titulo, descripcion_detallada')
          .eq('transporte', transporte)
          .eq('destino', destino)
          .is('hotel', null) // hotel NULL = gen√©rico
          .limit(1)
          .single()

        console.log('üìä DESCRIPTIONS: Resultado gen√©rico:', { data: genericData, error: genericError })

        if (genericError || !genericData) {
          console.log('‚ö†Ô∏è DESCRIPTIONS: N√£o encontrado, usando fallback')
          return this.getFallbackDescription(transporte, destino, hotel)
        }

        data = genericData
      }

      const description: PackageDescription = {
        titulo: data.titulo || this.getFallbackDescription(transporte, destino, hotel).titulo,
        descripcion: data.descripcion_detallada || this.getFallbackDescription(transporte, destino, hotel).descripcion
      }

      // Cache result
      this.cache.set(cacheKey, description)
      console.log('‚úÖ DESCRIPTIONS: Descri√ß√£o carregada do Supabase:', description)
      
      return description

    } catch (error) {
      console.error('‚ùå DESCRIPTIONS: Erro completo:', error)
      return this.getFallbackDescription(transporte, destino, hotel)
    }
  }

  private getFallbackDescription(transporte: 'Bus' | 'A√©reo', destino: string, hotel: string): PackageDescription {
    const isAereo = transporte === 'A√©reo'
    
    return {
      titulo: `Experiencia ${isAereo ? 'Premium' : 'Completa'} en ${destino}`,
      descripcion: isAereo 
        ? `Experimente ${destino} con m√°ximo confort! Nuestro paquete a√©reo premium incluye vuelos directos, hospedaje en ${hotel} y noches de relajaci√≥n. Desayunos completos, tours exclusivos y todas las comodidades para que vivas unas vacaciones perfectas.`
        : `¬°Vive la experiencia completa en ${destino}! Nuestro paquete en bus te ofrece d√≠as de aventura, incluyendo hospedaje en ${hotel}. Transporte c√≥modo con aire acondicionado, desayunos incluidos y tiempo suficiente para explorar cada rinc√≥n de esta paradis√≠aca playa.`
    }
  }

  clearCache(): void {
    this.cache.clear()
    console.log('üßπ DESCRIPTIONS: Cache limpo')
  }
}

export const packageDescriptionService = new PackageDescriptionService() 